        // 7.1 Wstep do programowania funkcyjnego - podejscie obiektowe
        System.out.println("Welcome to module 7 - Stream");
        SaySomething saySomething = new SaySomething();
        saySomething.say();

        Processor processor = new Processor();
        ExecuteSaySomething executeSaySomething = new ExecuteSaySomething();
        processor.execute(executeSaySomething);
        Executor codeToExecute = () -> System.out.println("This is an example text.");
        processor.execute(codeToExecute);
        processor.execute(() -> System.out.println("This is an example text."));

        // Podejscie funkcyjne - wyrazenia lambda
        ExpressionExecutor expressionExecutor = new ExpressionExecutor();

        System.out.println("Calculating expressions with lambdas:");
        expressionExecutor.executeExpression(10, 5, (a, b) -> a + b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a - b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a * b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a / b);
        System.out.println();
        System.out.println("Calculating expressions with method references:");
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::addAToB);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::subBFromA);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::multiplyAByB);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::divideAByB);

        // 7.1 Zadanie: upiekszacz tekstow
        PoemBeautifier poemBeautifier = new PoemBeautifier();
        poemBeautifier.beautify("A", "", (one, two) -> "Battery type: " + one + one);
        poemBeautifier.beautify("triple", "A", (one, two) -> "Battery type: " + one + "-" + two);
        poemBeautifier.beautify("A", "b", (one, two) -> one.toLowerCase() + two.toUpperCase());
        poemBeautifier.beautify("!!!", "This sentence needed an adequate exclamation", (one, two) -> two + one);
        poemBeautifier.beautify("A", "B", (one, two) -> "So we can change one with two: " + one.replace('A', 'B'));
        poemBeautifier.beautify("A", "B", (one, two) -> "The two strings match: " + two.matches(one));
        poemBeautifier.beautify("Ala ma kota.", "A teraz juz nie ma ", (one, two) -> one + " " + two + one.substring(7));

        // 7.2 Przyklad wykorzystujacy Stream
        System.out.println("Using Stream to generate even numbers from 1 to 20");
                NumbersGenerator.generateEven(20);

        // 7.3 Kaskadowe laczenie operacji na Stream
        People.getList().stream()
            .map(String::toUpperCase)
            .filter(s -> s.length() > 11)
            .map(s -> s.substring(0, s.indexOf(' ') + 2) + ".")
            .filter(s -> s.substring(0, 1).equals("M"))
            .forEach(s -> System.out.println(s));

        // 7.3 Operacje terminalne - kolektory (toMap)
        BookDirectory theBookDirectory = new BookDirectory();
        Map<String, Book> theResultMapOfBooks = theBookDirectory.getList().stream()
            .filter(book -> book.getYearOfPublication() > 2005)
            .collect(Collectors.toMap(Book::getSignature, book -> book));

        System.out.println("# elements: " + theResultMapOfBooks.size());
        theResultMapOfBooks.entrySet().stream()
            .map(entry -> entry.getKey() + ": " + entry.getValue())
            .forEach(System.out::println);

        // 7.3 Operacje terminalne - kolektory (joining)
        BookDirectory theBookDirectory = new BookDirectory();
        String theResultStringOfBooks = theBookDirectory.getList().stream()
            .filter(book -> book.getYearOfPublication() > 2005)
            .map(Book::toString)
            .collect(Collectors.joining(",\n", "<<", ">>"));

        System.out.println(theResultStringOfBooks);