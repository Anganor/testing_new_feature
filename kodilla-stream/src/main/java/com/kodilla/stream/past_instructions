        // 7.1 Wstep do programowania funkcyjnego - podejscie obiektowe
        System.out.println("Welcome to module 7 - Stream");
        SaySomething saySomething = new SaySomething();
        saySomething.say();

        Processor processor = new Processor();
        ExecuteSaySomething executeSaySomething = new ExecuteSaySomething();
        processor.execute(executeSaySomething);
        Executor codeToExecute = () -> System.out.println("This is an example text.");
        processor.execute(codeToExecute);
        processor.execute(() -> System.out.println("This is an example text."));

        // Podejscie funkcyjne - wyrazenia lambda
        ExpressionExecutor expressionExecutor = new ExpressionExecutor();

        System.out.println("Calculating expressions with lambdas:");
        expressionExecutor.executeExpression(10, 5, (a, b) -> a + b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a - b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a * b);
        expressionExecutor.executeExpression(10, 5, (a, b) -> a / b);
        System.out.println();
        System.out.println("Calculating expressions with method references:");
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::addAToB);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::subBFromA);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::multiplyAByB);
        expressionExecutor.executeExpression(3, 4, FunctionalCalculator::divideAByB);

        // 7.1 Zadanie: upiekszacz tekstow
        PoemBeautifier poemBeautifier = new PoemBeautifier();
        poemBeautifier.beautify("A", "", (one, two) -> "Battery type: " + one + one);
        poemBeautifier.beautify("triple", "A", (one, two) -> "Battery type: " + one + "-" + two);
        poemBeautifier.beautify("A", "b", (one, two) -> one.toLowerCase() + two.toUpperCase());
        poemBeautifier.beautify("!!!", "This sentence needed an adequate exclamation", (one, two) -> two + one);
        poemBeautifier.beautify("A", "B", (one, two) -> "So we can change one with two: " + one.replace('A', 'B'));
        poemBeautifier.beautify("A", "B", (one, two) -> "The two strings match: " + two.matches(one));
        poemBeautifier.beautify("Ala ma kota.", "A teraz juz nie ma ", (one, two) -> one + " " + two + one.substring(7));